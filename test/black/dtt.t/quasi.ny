def Gel (A : Type) (A' : A ‚Üí Type) : Type‚ÅΩ·µà‚Åæ A ‚âî sig x ‚Ü¶ (ungel : A' x)

def ASST : Type ‚âî codata [
| X .z : Type
| X .s : ASST‚ÅΩ·µà‚Åæ X
]

{` 0-Degeneracies `}
def Degen‚ÇÄ (A : ASST) : ASST ‚âî [
| .z ‚Ü¶ (p : A .z) (x : A .s .z p) ‚Üí A .s .s .z p x x
| .s ‚Ü¶ Degen‚ÇÄ‚ÅΩ·µà‚Åæ A (A .s)
]

{` 1-Degeneracies, displayed over 0-degeneracies. `}
def Degen‚ÇÅ (A : ASST) : ASST‚ÅΩ·µà‚Åæ (Degen‚ÇÄ A) ‚âî [
| .z ‚Ü¶ Gel (Degen‚ÇÄ A .z) (dp ‚Ü¶ (p : A .z) (x y : A .s .z p) (Œ± : A .s .s .z p x y) ‚Üí A .s .s .s .z p x x (dp p x) y Œ± Œ±)
| .s ‚Ü¶ sym (Degen‚ÇÅ‚ÅΩ·µà‚Åæ A (A .s))
]

` Tests

` Set up a bunch of data in an augmented semisimplicial type.
axiom X : ASST
axiom p : X .z
axiom x : X .s .z p
axiom y : X .s .z p
axiom Œ± : X .s .s .z p x y
axiom z : X .s .z p
axiom Œ≤ : X .s .s .z p x z
axiom Œ≥ : X .s .s .z p y z
axiom f : X .s .s .s .z p x y Œ± z Œ≤ Œ≥

` Likewise, define a handful of 0-degeneracies.
axiom dp‚ÇÄ : Degen‚ÇÄ X .z
axiom dx‚ÇÄ  : Degen‚ÇÄ X .s .z dp‚ÇÄ
axiom dy‚ÇÄ  : Degen‚ÇÄ X .s .z dp‚ÇÄ
axiom dŒ±‚ÇÄ  : Degen‚ÇÄ X .s .s .z dp‚ÇÄ dx‚ÇÄ dy‚ÇÄ

` Finally, define a handful of 1-degeneracies over our previous 0-degeneracies.
axiom dp‚ÇÅ : Degen‚ÇÅ X .z dp‚ÇÄ
axiom dx‚ÇÅ : Degen‚ÇÅ X .s .z dp‚ÇÄ dp‚ÇÅ dx‚ÇÄ
axiom dy‚ÇÅ : Degen‚ÇÅ X .s .z dp‚ÇÄ dp‚ÇÅ dy‚ÇÄ

` üòé Printing out 0-degeneracies gives the expected types!
echo dp‚ÇÄ p x
echo dx‚ÇÄ p x y Œ±
echo dŒ±‚ÇÄ p x y Œ± z Œ≤ Œ≥ f

` üòµ‚Äçüí´ Printing out dp‚ÇÅ works just fine, but attempting to work with dx‚ÇÅ runs into trouble!
echo dp‚ÇÅ .ungel p x y Œ±

` We can debug print dx‚ÇÅ, and it seems like we should be able to `ungel` it. Moreover, it looks
` very much like the representation of dp‚ÇÅ.
dump dp‚ÇÅ
dump dx‚ÇÅ
{`
Output:
Act (Const dp‚ÇÅ, ) : Inst (Act (App (Act (App (Act (Const Gel, ), ?), ), ?), 1), ?)
Act (Const dx‚ÇÅ, ) : Inst (Act (App (Act (App (Act (Const Gel, d), ?), 1), ?), 21), ?)
`}

` We can also compare `dp‚ÇÅ` to `dp‚ÇÅ .ungel`
dump dp‚ÇÅ .ungel
{`
Output:
Act (Field (Act (Const dp‚ÇÅ, ), ungel), ) : Pi (?, ?, ?)
`}

` However, this complains!
dump dx‚ÇÅ .ungel
{`
Output:
 Ôø´ error[E0800]
 record type with a nonidentity degeneracy applied is no longer a record, hence has no field named ungel
`}
