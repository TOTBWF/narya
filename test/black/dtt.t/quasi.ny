{` Prelude `}

def ‚ä• : Type := data []
def ‚ä§ : Type := sig ()

def absurd (A : Type) : ‚ä• ‚Üí A := []

def Nat : Type := data [
| zero. : Nat
| succ. : Nat ‚Üí Nat
]

def Œ£ (A : Type) (B : A ‚Üí Type) : Type :=
  sig (fst : A, snd : B fst)

def coprod (A B : Type) : Type := data [
| inl. : A ‚Üí coprod A B
| inr. : B ‚Üí coprod A B
]

def Maybe (A : Type) : Type := data [
| some. : A ‚Üí Maybe A
| none. : Maybe A
]

def Maybe.rec (A X : Type) (x : X) (f : A ‚Üí X) : Maybe A ‚Üí X := [
| none. ‚Ü¶ x
| some. a ‚Ü¶ f a
]

notation 5 coprod : A "+" B := coprod A B

def Coprod.rec (A B X : Type) (f : A ‚Üí X) (g : B ‚Üí X) : A + B ‚Üí X := [
| inl. a ‚Ü¶ f a
| inr. b ‚Ü¶ g b
]


def Gel (A : Type) (A' : A ‚Üí Type) : Type‚ÅΩ·µà‚Åæ A ‚âî sig x ‚Ü¶ (ungel : A' x)
{` Simplices + Augmented Simplices `}

def SST : Type ‚âî codata [
| X .z : Type
| X .s : (X .z) ‚Üí SST‚ÅΩ·µà‚Åæ X
]

def ASST : Type ‚âî codata [
| X .z : Type
| X .s : ASST‚ÅΩ·µà‚Åæ X
]

def SST.‚ä• : SST ‚âî [
| .z ‚Ü¶ ‚ä•
| .s ‚Ü¶ [ ]
]

def SST.‚ä§ : SST ‚âî [
| .z ‚Ü¶ ‚ä§
| .s ‚Ü¶ _ ‚Ü¶ SST.‚ä§‚ÅΩ·µà‚Åæ
]

def SST.const (X Y : SST) : SST‚ÅΩ·µà‚Åæ X ‚âî [
| .z ‚Ü¶ sig _ ‚Ü¶ ( ungel : Y .z )
| .s ‚Ü¶ x y ‚Ü¶ sym (SST.const‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (y .ungel)))
]

def Hom (X Y : SST) : Type ‚âî codata [
| f .z : X .z ‚Üí Y .z
| f .s : (x : X .z) ‚Üí Hom‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (f .z x)) f
]

def Sec (X : SST) (Y : SST‚ÅΩ·µà‚Åæ X) : Type := codata [
| S .z : (x : X .z) ‚Üí Y .z x
| S .s : (x : X .z) ‚Üí Sec‚ÅΩ·µà‚Åæ X (X .s x) Y (sym (Y .s x (S .z x))) S
]

def SST.pullback (X Y : SST) (f : Hom X Y) (Y' : SST‚ÅΩ·µà‚Åæ Y) : SST‚ÅΩ·µà‚Åæ X := [
| .z ‚Ü¶ Gel (X .z) (x ‚Ü¶ Y' .z (f .z x))
| .s ‚Ü¶ x x' ‚Ü¶
  sym (SST.pullback‚ÅΩ·µà‚Åæ X (X .s x)
    Y (Y .s (f .z x))
    f (f .s x)
    Y' (sym (Y' .s (f .z x) (x' .ungel))))
]

{` 0-Degeneracies `}
def Degen‚ÇÄ (A : ASST) : ASST ‚âî [
| .z ‚Ü¶ (p : A .z) (x : A .s .z p) ‚Üí A .s .s .z p x x
| .s ‚Ü¶ Degen‚ÇÄ‚ÅΩ·µà‚Åæ A (A .s)
]

{` 1-Degeneracies, displayed over 0-degeneracies. `}
def Degen‚ÇÅ (A : ASST) : ASST‚ÅΩ·µà‚Åæ (Degen‚ÇÄ A) ‚âî [
| .z ‚Ü¶
  Gel (Degen‚ÇÄ A .z)
    (dp ‚Ü¶
      (p : A .z) (x y : A .s .z p) (Œ± : A .s .s .z p x y) ‚Üí
      A .s .s .s .z p x x (dp p x) y Œ± Œ±)
| .s ‚Ü¶ sym (Degen‚ÇÅ‚ÅΩ·µà‚Åæ A (A .s))
]

def Cocone (A : SST) : SST := [
| .z ‚Ü¶ Maybe (A .z)
| .s ‚Ü¶ [
  | none. ‚Ü¶ SST.const (Cocone A) SST.‚ä•
  | some. a ‚Ü¶ Cocone‚ÅΩ·µà‚Åæ A (A .s a)
  ]
]

` Extend a displayed SST over `A` to a displayed SST over `Cocone A` by extending
` with empty fibres.
def Cocone.extend (A : SST) (A' : SST‚ÅΩ·µà‚Åæ A) : SST‚ÅΩ·µà‚Åæ (Cocone A) := [
| .z ‚Ü¶ Gel (Maybe (A .z)) (Maybe.rec (A .z) Type ‚ä• (a ‚Ü¶ A' .z a))
| .s ‚Ü¶ x x' ‚Ü¶ match x [
  | none. ‚Ü¶ absurd (SST‚ÅΩ·µà·µà‚Åæ (Cocone A) (Cocone.extend A A') (SST.const (Cocone A) SST.‚ä•)) (x' .ungel)
  | some. a ‚Ü¶ sym (Cocone.extend‚ÅΩ·µà‚Åæ A (A .s a) A' (sym (A' .s a (x' .ungel))))
  ]
]

{`
TODO:
Given a mono (or hom, really), construct a type that says there are no maps into
the image in the codomain (resp, no maps out).
`}

def Cocone.inc (A : SST) : Hom A (Cocone A) := [
| .z ‚Ü¶ a ‚Ü¶ some. a
| .s ‚Ü¶ a ‚Ü¶ Cocone.inc‚ÅΩ·µà‚Åæ A (A .s a)
]

def Cocone.over
  (A : SST) (a : A .z) :
  Hom‚ÅΩ·µà‚Åæ A (A .s a) (Cocone A) (Cocone.extend A (A .s a)) (Cocone.inc A) :=
[
| .z ‚Ü¶ b Œ± ‚Ü¶ (ungel := ?)
| .s ‚Ü¶ b Œ± ‚Ü¶ ? `Cocone.over‚ÅΩ·µà‚Åæ A (A .s a) b Œ±
]

def Join (A B : SST) : SST := [
| .z ‚Ü¶ A .z + B .z
| .s ‚Ü¶ [
  | inl. a ‚Ü¶ Join‚ÅΩ·µà‚Åæ A (A .s a) B (SST.const B B)
  | inr. b ‚Ü¶ Join‚ÅΩ·µà‚Åæ
  ]
]

def Join.extend (A B : SST) (B' : SST‚ÅΩ·µà‚Åæ B) : SST‚ÅΩ·µà‚Åæ (Join A B) := [
| .z ‚Ü¶ Gel (A .z + B .z) (Coprod.rec (A .z) (B .z) Type (_ ‚Ü¶ ‚ä•) (b ‚Ü¶ B' .z b))
| .s ‚Ü¶ x x' ‚Ü¶ match x [
  | inl. a ‚Ü¶ ?
  | inr. b ‚Ü¶ ?
  ]
]


{`
We need to invert the cone somehow.

`}

def Cocone.rec
  (X Y : SST)
  (pt : Y .z)
  (f : Hom X Y)
  (g : Sec X (SST.pullback X Y f (Y .s pt)))
  : Hom (Cocone X) Y := [
  | .z ‚Ü¶ [
    | none. ‚Ü¶ pt
    | some. x ‚Ü¶ f .z x
  ]
  | .s ‚Ü¶ [
    | none. ‚Ü¶ ?
    ` Cocone.rec‚ÅΩ·µà‚Åæ X (X .s ?) Y ? pt ? f ? g ?
    | some. x ‚Ü¶ Cocone.rec‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (f .z x)) pt (g .z x .ungel) f ? g ?
  ]
]

` ` NOTE: These really want to be augmented...
` def Œî : Nat ‚Üí SST := [
` | zero. ‚Ü¶ Cocone SST.‚ä•
` | succ. n ‚Ü¶ Cocone (Œî n)
` ]

` Tests

` ` Set up a bunch of data in an augmented semisimplicial type.
` axiom X : ASST
` axiom p : X .z
` axiom x : X .s .z p
` axiom y : X .s .z p
` axiom Œ± : X .s .s .z p x y
` axiom z : X .s .z p
` axiom Œ≤ : X .s .s .z p x z
` axiom Œ≥ : X .s .s .z p y z
` axiom f : X .s .s .s .z p x y Œ± z Œ≤ Œ≥

` ` Likewise, define a handful of 0-degeneracies.
` axiom dp‚ÇÄ : Degen‚ÇÄ X .z
` axiom dx‚ÇÄ  : Degen‚ÇÄ X .s .z dp‚ÇÄ
` axiom dy‚ÇÄ  : Degen‚ÇÄ X .s .z dp‚ÇÄ
` axiom dŒ±‚ÇÄ  : Degen‚ÇÄ X .s .s .z dp‚ÇÄ dx‚ÇÄ dy‚ÇÄ

` ` Finally, define a handful of 1-degeneracies over our previous 0-degeneracies.
` axiom dp‚ÇÅ : Degen‚ÇÅ X .z dp‚ÇÄ
` axiom dx‚ÇÅ : Degen‚ÇÅ X .s .z dp‚ÇÄ dp‚ÇÅ dx‚ÇÄ
` axiom dy‚ÇÅ : Degen‚ÇÅ X .s .z dp‚ÇÄ dp‚ÇÅ dy‚ÇÄ

` ` üòé Printing out 0-degeneracies gives the expected types!
` echo dp‚ÇÄ p x
` echo dx‚ÇÄ p x y Œ±
` echo dŒ±‚ÇÄ p x y Œ± z Œ≤ Œ≥ f

` ` üòµ‚Äçüí´ Printing out dp‚ÇÅ works just fine, but attempting to work with dx‚ÇÅ runs into trouble!
` echo dp‚ÇÅ .ungel p x y Œ±
` echo (sym dx‚ÇÅ) .ungel p x y Œ± z Œ≤ Œ≥ f

axiom X : SST
axiom y : X .z
axiom z : X .z
axiom Œ≥ : X .s y .z z

def K : SST := Cocone X

def kx : K .z := none.
def ky : K .z := some. y
def kz : K .z := some. z

` There are no 1-cells from (into?) an adjoined point `x`.
def bad (pt : K .z) (Œ± : K .s kx .z pt) : ‚ä• := Œ± .ungel

def kŒ± : K .s ky .z kx := none.
