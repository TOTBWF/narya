`````````````````````````````````````````````````````````````````````````````````````
`` Prelude.

` Unit type; use `()` to introduce an element.
def ‚ä§ : Type := sig ()

` Empty type.
def ‚ä• : Type := data []

` Elimination principle for `‚ä•`; useful for when we cannot use an empty pattern
` match directly.
def absurd (A : Type) : ‚ä• ‚Üí A := []

def Nat : Type := data [
| zero. : Nat
| suc. : Nat ‚Üí Nat
]


` Degenerate a Nat into a Nat‚ÅΩ·µà‚Åæ.
def Nat.degen (n : Nat) : Nat‚ÅΩ·µà‚Åæ n := match n [
| zero. ‚Ü¶ zero.
| suc. n ‚Ü¶ suc. (Nat.degen n)
]

def Œ£ (A : Type) (B : A ‚Üí Type) : Type :=
  sig (fst : A, snd : B fst)

` We define `Prod` as a separate record type to get better goals.
def Prod (A : Type) (B : Type) : Type :=
  sig (fst : A, snd : B)

notation 6 Prod : A "√ó" B := Prod A B

` Coproducts.
def Coprod (A B : Type) : Type := data [
| inl. : A ‚Üí Coprod A B
| inr. : B ‚Üí Coprod A B
]

notation 5 Coprod : A "+" B := Coprod A B

` Recursor for coproducts.
def Coprod.rec (A B X : Type) (f : A ‚Üí X) (g : B ‚Üí X) : A + B ‚Üí X := [
| inl. a ‚Ü¶ f a
| inr. b ‚Ü¶ g b
]

` We define `Maybe` separately to get better goals.
def Maybe (A : Type) : Type := data [
| some. : A ‚Üí Maybe A
| none. : Maybe A
]

` Recursor for `Maybe`.
def Maybe.rec (A X : Type) (x : X) (f : A ‚Üí X) : Maybe A ‚Üí X := [
| none. ‚Ü¶ x
| some. a ‚Ü¶ f a
]


` The "synthetic" gel operation; classifies `Type‚ÅΩ·µà‚Åæ A` via a map into the universe.
def Gel (A : Type) : (A ‚Üí Type) ‚Üí Type‚ÅΩ·µà‚Åæ A := A' ‚Ü¶ sig x ‚Ü¶ (ungel : A' x)

` Typically, users should write `(ungel := x)` to introduce an element of `Gel`.
` This will not work when the gel type is underneath a `sym` for bidirectionality
` reasons, so we provide an explicit introduction form as well.
def Gel.intro (A : Type) (A' : A ‚Üí Type) (x : A) (x' : A' x) : Gel A A' x :=
  (ungel := x')

` Two-dimensional gel.
def SGel¬≤
  (Ap : Type) (Ax Ay : Type‚ÅΩ·µà‚Åæ Ap)
  (AŒ± : (p : Ap) ‚Üí Ax p ‚Üí Ay p ‚Üí Type)
  : Type‚ÅΩ·µà·µà‚Åæ Ap Ax Ay := sig p x y ‚Ü¶ (ungel : AŒ± p x y)

`````````````````````````````````````````````````````````````````````````````````````
`` Analytic semi-simplicial types.

` Semi
def SST : Type := codata [
| X .z : Type
| X .s : (X .z) ‚Üí SST‚ÅΩ·µà‚Åæ X
]

def Hom (X Y : SST) : Type := codata [
| f .z : X .z ‚Üí Y .z
| f .s : (x : X .z) ‚Üí Hom‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (f .z x)) f
]

` "Vertical" homs that have better definitional compositions.
def VHom (X : SST) (X' Y' : SST‚ÅΩ·µà‚Åæ X) : Type := codata [
| f .z : (x : X .z) ‚Üí X' .z x ‚Üí Y' .z x
| f .s : (x : X .z) (x' : X' .z x) ‚Üí VHom‚ÅΩ·µà‚Åæ X (X .s x) X' (sym (X' .s x x')) Y' (sym (Y' .s x (f .z x x'))) f
]

def Hom.comp (X Y Z : SST) (f : Hom X Y) (g : Hom Y Z) : Hom X Z := ?

def Hom.vcompl
  (X Y : SST)
  (X' X'' : SST‚ÅΩ·µà‚Åæ X) (Y' : SST‚ÅΩ·µà‚Åæ Y)
  (f : VHom X X' X'')
  (g : Hom X Y) (g' : Hom‚ÅΩ·µà‚Åæ X X'' Y Y' g)
  : Hom‚ÅΩ·µà‚Åæ X X' Y Y' g := ?

def Sec (X : SST) (Y : SST‚ÅΩ·µà‚Åæ X) : Type := codata [
| S .z : (x : X .z) ‚Üí Y .z x
| S .s : (x : X .z) ‚Üí Sec‚ÅΩ·µà‚Åæ X (X .s x) Y (sym (Y .s x (S .z x))) S
]

def SST.const (X Y : SST) : SST‚ÅΩ·µà‚Åæ X := [
| .z ‚Ü¶ Gel (X .z) (x ‚Ü¶ Y .z) `sig _ ‚Ü¶ ( ungel : Y .z )
| .s ‚Ü¶ x y ‚Ü¶ sym (SST.const‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (y .ungel)))
]

def SST.pullback (X Y : SST) (f : Hom X Y) (Y' : SST‚ÅΩ·µà‚Åæ Y) : SST‚ÅΩ·µà‚Åæ X := [
| .z ‚Ü¶ Gel (X .z) (x ‚Ü¶ Y' .z (f .z x))
| .s ‚Ü¶ x x' ‚Ü¶
  sym (SST.pullback‚ÅΩ·µà‚Åæ X (X .s x)
    Y (Y .s (f .z x))
    f (f .s x)
    Y' (sym (Y' .s (f .z x) (x' .ungel))))
]

def SST.‚ä§ : SST := [
| .z ‚Ü¶ ‚ä§
| .s ‚Ü¶ _ ‚Ü¶ SST.‚ä§‚ÅΩ·µà‚Åæ
]

def SST.‚ä• : SST := [
| .z ‚Ü¶ ‚ä•
| .s ‚Ü¶ []
]

def SST.¬°·µõ (A : SST) (A' : SST‚ÅΩ·µà‚Åæ A) : VHom A (SST.const A SST.‚ä•) A' := ?

def SST.¬°¬≤ (A B : SST) (f : Hom A B) (B' : SST‚ÅΩ·µà‚Åæ B) : Hom‚ÅΩ·µà‚Åæ A (SST.const A SST.‚ä•) B B' f :=
[
| .z ‚Ü¶ a ff ‚Ü¶ absurd (B' .z (f .z a)) (ff .ungel)
| .s ‚Ü¶ a ff ‚Ü¶
  absurd
    (Hom‚ÅΩ·µà·µà‚Åæ A (SST.const A SST.‚ä•) (A .s a)
         (sym (SST.const‚ÅΩ·µà‚Åæ A (A .s a) SST.‚ä• (SST.‚ä• .s (ff .ungel)))) B B'
         (B .s (f .z a))
         (B' .s (f .z a) (absurd (B' .z (f .z a)) (ff .ungel))) f
         (SST.¬°¬≤ A B f B') (f .s a))
    (ff .ungel)
]



def Disc (X : Type) : SST := [
| .z ‚Ü¶ X
| .s ‚Ü¶ x ‚Ü¶ SST.const (Disc X) SST.‚ä• `Disc‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä•))
]

def Disc.gel (X Y : Type)
  : VHom (Disc X) (SST.const (Disc X) (Disc Y)) (Disc‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ Y)))
  := [
| .z ‚Ü¶ x y ‚Ü¶ (ungel := y .ungel)
| .s ‚Ü¶ x y ‚Ü¶ ?
]

       ` VHom (Disc X) (SST.const (Disc X) (Disc ‚ä§))
       `   (Disc‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä§)))

def Œî‚ÇÄ : SST := Disc ‚ä§

def „Çà‚ÇÄ (X : Type) (A : SST) (a : X ‚Üí A .z) : Hom (Disc X) A := [
| .z ‚Ü¶ x ‚Ü¶ a x
| .s ‚Ü¶ x ‚Ü¶ SST.¬°¬≤ (Disc X) A („Çà‚ÇÄ X A a) (A .s (a x))
]

def Join (X : Type) (A : SST) (B : SST) : SST := [
| .z ‚Ü¶ (X √ó A .z) + B .z
| .s ‚Ü¶ [
  | inl. xa ‚Ü¶ Join‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä•)) A (A .s (xa .snd)) B (SST.const B (Disc X))
  | inr. b ‚Ü¶ Join‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä•)) A (SST.const A SST.‚ä•) B (B .s b)
  ]
]

def Cone (X : Type) (A : SST) : SST := Join X Œî‚ÇÄ A
def Cocone (X : Type) (A : SST) : SST := Join X A Œî‚ÇÄ

def Join.rec
  (X : Type) (A B T : SST)
  (f : Hom A T) (g : Hom B T)
  (s : (xa : X √ó A .z) ‚Üí Hom‚ÅΩ·µà‚Åæ B (SST.const B (Disc X)) T (T .s (f .z (xa .snd))) g)
  : Hom (Join X A B) T :=
[
| .z ‚Ü¶ [
  | inl. xa ‚Ü¶ f .z (xa .snd)
  | inr. b ‚Ü¶ g .z b
  ]
| .s ‚Ü¶ [
  | inl. xa ‚Ü¶
    Join.rec‚ÅΩ·µà‚Åæ
      X (Gel X (_ ‚Ü¶ ‚ä•))
      A (A .s (xa .snd))
      B (SST.const B (Disc X))
      T (T .s (f .z (xa .snd)))
      f (f .s (xa .snd))
      g (s xa)
      s (xa' ff ‚Ü¶
        absurd
          (Hom‚ÅΩ·µà·µà‚Åæ
            B (SST.const B (Disc X)) (SST.const B (Disc X))
            (SST.const‚ÅΩ·µà‚Åæ B (SST.const B (Disc X)) (Disc X) (Disc‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä•))))
            T (T .s (f .z (xa .snd))) (T .s (f .z (xa' .snd)))
            (T .s (f .z (xa .snd)) .s (f .z (xa' .snd)) (f .s (xa .snd) .z (xa' .snd) (ff .snd)))
            g (s xa) (s xa'))
        (ff .fst .ungel))
  | inr. b ‚Ü¶
    Join.rec‚ÅΩ·µà‚Åæ
      X (Gel X (_ ‚Ü¶ ‚ä•))
      A (SST.const A SST.‚ä•)
      B (B .s b)
      T (T .s (g .z b))
      f (SST.¬°¬≤ A T f (T .s (g .z b)))
      g (g .s b)
      s (xa' ff ‚Ü¶
        absurd
          (Hom‚ÅΩ·µà·µà‚Åæ B (B .s b) (SST.const B (Disc X))
           (SST.const‚ÅΩ·µà‚Åæ B (B .s b) (Disc X) (Disc‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä•)))) T
         (T .s (g .z b)) (T .s (f .z (xa' .snd)))
         (T .s (g .z b) .s (f .z (xa' .snd))
            (absurd (T .s (g .z b) .z (f .z (xa' .snd))) (ff .snd .ungel))) g
         (g .s b) (s xa'))
        (ff .fst .ungel))
  ]
]

def Join.inr
  (X : Type)
  (A B : SST)
  : Hom B (Join X A B)
  := ?

def Cone.rec
  (X : Type)
  (A B : SST)
  (f : Hom A B) (pt : B .z)
  (s : Hom‚ÅΩ·µà‚Åæ A (SST.const A (Disc X)) B (B .s pt) f)
  : Hom (Cone X A) B
  := Join.rec X Œî‚ÇÄ A B („Çà‚ÇÄ ‚ä§ B (_ ‚Ü¶ pt)) f (_ ‚Ü¶ s)

` The displayed SST of data over `a`.
def SST.over (A : SST) (a : A .z) : SST‚ÅΩ·µà‚Åæ A := [
| .z ‚Ü¶ Gel (A .z) (b ‚Ü¶ A .s b .z a)
| .s ‚Ü¶ b Œ± ‚Ü¶ sym (SST.over‚ÅΩ·µà‚Åæ A (A .s b) a (Œ± .ungel))
]

` The opposite SST.
def SST.op (A : SST) : SST := [
| .z ‚Ü¶ A .z
| .s ‚Ü¶ a ‚Ü¶ SST.op‚ÅΩ·µà‚Åæ A (SST.over A a)
]

` Representables.
def Œî (X : Type) : Nat ‚Üí SST := [
| zero. ‚Ü¶ Disc X
| suc. n ‚Ü¶ Cone ‚ä§ (Œî X n)
]

def Œî.gel (X : Type) (n : Nat)
  : VHom (Œî X n) (SST.const (Œî X n) (Disc ‚ä§)) (Œî‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä§)) n (Nat.degen n))
  := match n [
| zero. ‚Ü¶ Disc.gel X ‚ä§
| suc. n ‚Ü¶ [
  | .z ‚Ü¶ x x' ‚Ü¶ match x [
    | inl. tt ‚Ü¶ inl. ((), ())
    | inr. x ‚Ü¶ inr. (Œî.gel X n .z x (ungel := ())) `(Œî.gel‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä§)) n (Nat.degen n) .z x ? ? ?)
  ]
  | .s ‚Ü¶ x x' ‚Ü¶ match x [
    | inl. tt ‚Ü¶ ?
    ` NOTE: These all follow by a series of brutal `absurd` calls.
    ` If we had a built-in "kinetic absurd" that (a) lived in check and (b) could work with terms,
    ` then this headache could be avoided.
    `
    ` The other option is to build-in ‚ä• as a built-in with an eliminator that was in "check".
    ` [
    `   | .z ‚Ü¶ y y' z z' ‚Ü¶ ? `z' .ungel .ungel
    `   | .s ‚Ü¶ y y' z z' ‚Ü¶ ? `z' .ungel .ungel
    ` ]
    | inr. x ‚Ü¶ ?
    ` [
    `   | .z ‚Ü¶ y y' z z' ‚Ü¶ ? `z' .ungel .ungel
    `   | .s ‚Ü¶ y y' z z' ‚Ü¶ ? `z' .ungel .ungel
    ` ]
  ]
  ]
]

` The type of generalized n-dimensional boundaries in an SST `A`.
def ‚óã (X : Type) (n : Nat) (A : SST) : Type := match n [
| zero. ‚Ü¶ X
| suc. n ‚Ü¶
  sig
    (pt : A .z
    , ‚àÇa : ‚óã X n A
    , a : ‚óè X n A ‚àÇa
    , ‚àÇa' : ‚óã‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä§)) n (Nat.degen n) A (A .s pt) ‚àÇa
    )
]

` The type of generalized n-dimensional boundary fillers in an SST `A`.
and ‚óè (X : Type) (n : Nat) (A : SST) (‚óãa : ‚óã X n A) : Type := match n [
| zero. ‚Ü¶ X ‚Üí A .z
| suc. n ‚Ü¶ ‚óè‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä§)) n (Nat.degen n) A (A .s (‚óãa .pt)) (‚óãa .‚àÇa) (‚óãa .‚àÇa') (‚óãa .a)
]

def ùí∞ (X : Type) : SST := [
| .z ‚Ü¶ X ‚Üí Type
| .s ‚Ü¶ X' ‚Ü¶ ùí∞‚ÅΩ·µà‚Åæ X (Gel X X')
]

` Analytic yoneda: a boundary and a filler yields a generalized simplex in A.
def „Çà (X : Type) (A : SST) (n : Nat) (‚óãa : ‚óã X n A) (a : ‚óè X n A ‚óãa) : Hom (Œî X n) A := match n [
| zero. ‚Ü¶ „Çà‚ÇÄ X A a
| suc. n ‚Ü¶
  Cone.rec ‚ä§ (Œî X n) A
    („Çà X A n (‚óãa .‚àÇa) (‚óãa .a))
    (‚óãa .pt)
    ?
    ` This is morally correct, but a bit of golf with Hom.vcompr + Œî.gel is required.
    `(„Çà‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä§)) A (A .s (‚óãa .pt)) n (Nat.degen n) (‚óãa .‚àÇa) (‚óãa .‚àÇa') (‚óãa .a) a)
]

` axiom X : Type
` axiom x : X


` ` Tests:
` axiom A : SST
` axiom x : A .z
` axiom y : A .z
` axiom Œ± : A .s x .z y
` axiom z : A .z
` axiom Œ≤ : A .s x .z z
` axiom Œ≥ : A .s y .z z
` axiom f : A .s x .s y Œ± .z z Œ≤ Œ≥

` def ‚óãxy : ‚óã 1 A := (pt := x, ‚àÇa := (), a := y, ‚àÇa' := ())
` def ‚óèxy : ‚óè 1 A ‚óãxy := Œ±

` def ‚óãyz : ‚óã 1 A := (pt := y, ‚àÇa := (), a := z, ‚àÇa' := ())
` def ‚óèyz : ‚óè 1 A ‚óãyz := Œ≥

` def ‚óãŒ±Œ≤ : ‚óã‚ÅΩ·µà‚Åæ 1 1 A (A .s x) ‚óãyz := (pt := Œ±, ‚àÇa := (), a:= Œ≤, ‚àÇa' := ())
` def ‚óèŒ±Œ≤ : ‚óè‚ÅΩ·µà‚Åæ 1 1 A (A .s x) ‚óãyz ‚óãŒ±Œ≤ ‚óèyz := f

` def ‚óãŒ±Œ≤Œ≥ : ‚óã 2 A := (pt := x, ‚àÇa := ‚óãyz, a := ‚óèyz, ‚àÇa' := ‚óãŒ±Œ≤)
` def ‚óèŒ±Œ≤Œ≥ : ‚óè 2 A ‚óãŒ±Œ≤Œ≥ := ‚óèŒ±Œ≤

` ` Inline definition of all of the above data. Note the ordering!
` def ‚óãŒ±Œ≤Œ≥' : ‚óã 2 A := (x, (y, (), z, ()), Œ≥, (Œ±, (), Œ≤, ()))
` def ‚óèŒ±Œ≤Œ≥' : ‚óè 2 A ‚óãŒ±Œ≤Œ≥ := f


` Lesson learned:
` * Never, ever, ever use ‚ä§ when doing coinductive definitions.
