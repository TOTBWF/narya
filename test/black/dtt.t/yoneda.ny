{` This file contains the construction of join of SSTs `}

` Unit type; use `()` to introduce an element.
def ‚ä§ : Type := sig ()

` Empty type.
def ‚ä• : Type := data []

` Elimination principle for `‚ä•`; useful for when we cannot use an empty pattern
` match directly.
def absurd (A : Type) : ‚ä• ‚Üí A := []

` We define `Prod` as a separate record type to get better goals.
def Prod (A : Type) (B : Type) : Type :=
  sig (fst : A, snd : B)

notation 6 Prod : A "√ó" B := Prod A B

def Œ£ (A : Type) (B : A ‚Üí Type) : Type :=
  sig (fst : A, snd : B fst)

` Coproducts.
def Coprod (A B : Type) : Type := data [
| inl. : A ‚Üí Coprod A B
| inr. : B ‚Üí Coprod A B
]

notation 5 Coprod : A "‚äî" B := Coprod A B

def Coprod.rec (A B X : Type) (f : A ‚Üí X) (g : B ‚Üí X) : A ‚äî B ‚Üí X := [
| inl. a ‚Ü¶ f a
| inr. b ‚Ü¶ g b
]

def Nat : Type := data [
| zero. : Nat
| suc. : Nat ‚Üí Nat
]

def Nat.add (n : Nat) (m : Nat) : Nat := match n [
| zero. ‚Ü¶ m
| suc. n ‚Ü¶ suc. (Nat.add n m)
]

notation 5 Nat.add : n "+" k := Nat.add n k

` Degenerate a Nat into a Nat‚ÅΩ·µà‚Åæ.
def Nat.degen (n : Nat) : Nat‚ÅΩ·µà‚Åæ n := match n [
| zero. ‚Ü¶ zero.
| suc. n ‚Ü¶ suc. (Nat.degen n)
]

` Ordering on natural numbers.
def Nat.lte (k n : Nat) : Type := match k [
| zero. ‚Ü¶ ‚ä§
| suc. k ‚Ü¶ match n [
  | zero. ‚Ü¶ ‚ä•
  | suc. n ‚Ü¶ Nat.lte k n
  ]
]

` The strict order is defined in terms of non-strict order.
def Nat.lt (k n : Nat) : Type := Nat.lte (suc. k) n

notation 5 Nat.lte : k "‚â§" n := Nat.lte k n
notation 5 Nat.lt : k "<" n := Nat.lt k n

` Degenerate a proof that `k ‚â§ n`.
def Nat.lte.degen
  (k n : Nat)
  (h : k ‚â§ n)
  : Nat.lte‚ÅΩ·µà‚Åæ k (Nat.degen k) n (Nat.degen n) h := match k [
| zero. ‚Ü¶ ()
| suc. k ‚Ü¶ match n [
  | zero. ‚Ü¶ absurd (‚ä•‚ÅΩ·µà‚Åæ h) h
  | suc. n ‚Ü¶ Nat.lte.degen k n h
  ]
]

` Weaken a proof that `k ‚â§ n`.
def Nat.lte.wk (k n : Nat) (h : k ‚â§ n) : k ‚â§ suc. n := match k [
| zero. ‚Ü¶ ()
| suc. k ‚Ü¶ match n [
  | zero. ‚Ü¶ absurd (k ‚â§ 0) h
  | suc. n ‚Ü¶ Nat.lte.wk k n h
  ]
]

` The "synthetic" gel operation; classifies `Type‚ÅΩ·µà‚Åæ A` via a map into the universe.
def Gel (A : Type) : (A ‚Üí Type) ‚Üí Type‚ÅΩ·µà‚Åæ A := A' ‚Ü¶ sig x ‚Ü¶ (ungel : A' x)

`````````````````````````````````````````````````````````````````````````````````````
`` Analytic semi-simplicial types.

` The type of semisimplicial types.
def SST : Type := codata [
| X .z : Type
| X .s : (X .z) ‚Üí SST‚ÅΩ·µà‚Åæ X
]

` Maps of semisimplicial types.
def Hom (X Y : SST) : Type := codata [
| f .z : X .z ‚Üí Y .z
| f .s : (x : X .z) ‚Üí Hom‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (f .z x)) f
]

` The type of generalized n-dimensional boundaries in an SST `A`.
def ‚óã (n : Nat) (A : SST) : Type := match n [
| zero. ‚Ü¶ ‚ä§
| suc. n ‚Ü¶
  sig
    (pt : A .z
    , ‚àÇa : ‚óã n A
    , a : ‚óè n A ‚àÇa
    , ‚àÇa' : ‚óã‚ÅΩ·µà‚Åæ n (Nat.degen n) A (A .s pt) ‚àÇa
    )
]

` The type of generalized n-dimensional boundary fillers in an SST `A`.
and ‚óè (n : Nat) (A : SST) (‚óãa : ‚óã n A) : Type := match n [
| zero. ‚Ü¶ A .z
| suc. n ‚Ü¶ ‚óè‚ÅΩ·µà‚Åæ n (Nat.degen n) A (A .s (‚óãa .pt)) (‚óãa .‚àÇa) (‚óãa .‚àÇa') (‚óãa .a)
]

def Disc (X : Type) : SST := [
| .z ‚Ü¶ X
| .s ‚Ü¶ x ‚Ü¶ Disc‚ÅΩ·µà‚Åæ X (Gel X (_ ‚Ü¶ ‚ä•))
]

def Disc‚ÇÇ (A : SST) (X : A .z ‚Üí Type) : SST‚ÅΩ·µà‚Åæ A := [
| .z ‚Ü¶ Gel (A .z) (a ‚Ü¶ X a)
| .s ‚Ü¶ a x ‚Ü¶ sym (Disc‚ÇÇ‚ÅΩ·µà‚Åæ A (A .s a) X (b Œ± ‚Ü¶ Gel (X b) (_ ‚Ü¶ ‚ä•)))
]


` def Mike (X : Nat ‚Üí Type) : Œ†‚ÅΩ·µà‚Åæ Nat Nat‚ÅΩ·µà‚Åæ (_ ‚Ü¶ Type) (_ ‚§á Type‚ÅΩ·µà‚Åæ) X :=
`   i _ ‚Ü¶ match i [
`   | zero. ‚Ü¶ Gel (X 0) (_ ‚Ü¶ ‚ä•)
`   | suc. i ‚Ü¶ Gel (X (suc. i)) (_ ‚Ü¶ X (suc. i))
`   ]

def ‚ñ≤‚ÇÄ : SST := Disc ‚ä§

def ‚ñ≤ (X : Nat ‚Üí Type) : Nat ‚Üí SST := [
| zero. ‚Ü¶ Disc (X 0)
| suc. n ‚Ü¶ ‚ñ≤‚Å∫ X n
]

and ‚ñ≤‚Å∫ (X : Nat ‚Üí Type) (n : Nat) : SST := [
| .z ‚Ü¶ X 0 ‚äî ‚ñ≤ (i ‚Ü¶ X (suc. i)) n .z
| .s ‚Ü¶ v ‚Ü¶ ‚ñ≤‚Å∫‚ÅΩ·µà‚Åæ X (Cool X n (‚ñ≤.dim X (suc. n) v)) n (Nat.degen n)
]

and Cool
  (X : Nat ‚Üí Type) (n k : Nat)
  : Œ†‚ÅΩ·µà‚Åæ Nat Nat‚ÅΩ·µà‚Åæ (_ ‚Ü¶ Type) (_ ‚§á Type‚ÅΩ·µà‚Åæ) X
  :=
  i _ ‚Ü¶ match i [
  | zero. ‚Ü¶ Gel (X 0) (_ ‚Ü¶ ‚ä•)
  | suc. i ‚Ü¶ match k [
    | zero. ‚Ü¶ Gel (X (suc. i)) (_ ‚Ü¶ X (suc. i))
    | suc. k ‚Ü¶ Cool (i ‚Ü¶ X (suc. i)) n k i (Nat.degen i)
    ]
  ]

and ‚ñ≤.dim (X : Nat ‚Üí Type) (n : Nat) (v : ‚ñ≤ X n .z) : Nat :=
match n [
| zero. ‚Ü¶ zero.
| suc. n ‚Ü¶ match v [
  | inl. _ ‚Ü¶ 0
  | inr. v ‚Ü¶ suc. (‚ñ≤.dim (i ‚Ü¶ X (suc. i)) n v)
  ]
]

def ùüô‚ÇÄ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 1 .z := inl. ()
def ùüô‚ÇÅ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 1 .z := inr. ()

` def ùüô‚ÇÄ‚ÇÄ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 1 .s ùüô‚ÇÄ .z ùüô‚ÇÄ := ?
def ùüô‚ÇÄ‚ÇÅ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 1 .s ùüô‚ÇÄ .z ùüô‚ÇÅ := inr. (ungel := ())
` def ùüô‚ÇÅ‚ÇÄ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 1 .s ùüô‚ÇÅ .z ùüô‚ÇÄ := ? `inr. (ungel := ())
` def ùüô‚ÇÅ‚ÇÅ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 1 .s ùüô‚ÇÅ .z ùüô‚ÇÅ := ? `inr. ()

def ùüö‚ÇÄ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 2 .z := inl. ()
def ùüö‚ÇÅ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 2 .z := inr. ùüô‚ÇÄ
def ùüö‚ÇÇ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 2 .z := inr. ùüô‚ÇÅ

def ùüö‚ÇÄ‚ÇÅ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 2 .s ùüö‚ÇÄ .z ùüö‚ÇÅ := inr. (inl. (ungel := ()))
def ùüö‚ÇÄ‚ÇÇ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 2 .s ùüö‚ÇÄ .z ùüö‚ÇÇ := inr. (inr. (ungel := ()))
def ùüö‚ÇÅ‚ÇÇ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 2 .s ùüö‚ÇÅ .z ùüö‚ÇÇ := inr. ùüô‚ÇÄ‚ÇÅ

def ùüö‚ÇÄ‚ÇÅ‚ÇÇ : ‚ñ≤ (_ ‚Ü¶ ‚ä§) 2 .s ùüö‚ÇÄ .s ùüö‚ÇÅ ùüö‚ÇÄ‚ÇÅ .z ùüö‚ÇÇ ùüö‚ÇÄ‚ÇÇ ùüö‚ÇÅ‚ÇÇ := inr. (inr. (ungel := (ungel := ())))
